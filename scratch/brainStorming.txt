LTP.LayerManager = function LayerManager(width, height) {
	this._width = width;
	this._height = height;
};

LTP.LayerManager.prototype = {
	get width() {
		return this._width;
	},
	get height() {
		return this._height;
	},
	get count() {
	},
	get activeLayer() {
	},
	get composite() {
	},
	get layerInfo() {
	},
	get layers() {
	},
	addNewLayer: function(name) {
	},
	deleteLayer: function(index) {
	},
	moveLayer: function(from, to) {
	},
	mergeDown: function(index) {
	},
	flatten: function() {
	}
};

LTP = {
	init: function() {
	}
}

LTP.Painter = function() {
}

LTP.Painter.prototype = {
    set activeCanvas(canvas) {
        this.unhook(this._activeCanvas);
        this.hook(canvas);
        this._activeCanvas = canvas;
    },
    set leftTool(tool) {
    },
    set rightTool(tool) {
    },
    set zoom(zoom) {
    },
    set mode(mode) {
    }
}

LTP.KeyListener = function(callbacks) {
    function _onKeyDown(e) {
        if(callbacks.hasOwnProperty(e.charCode)) {
            if(typeof callbacks[e.charCode] === 'function') {
                callbacks[e.charCode].call(callbacks.scope);
            }
        }
    }
    document.addEventListener('keydown', _onKeyDown, false); 
}

LTP.App = function() {
}

LTP.App.prototype = {
    init: function(domElementHook) {

        this._toolbar = new LTP.Toolbar(this._createToolbarContainer(domElementHook));
        this._painter = new LTP.Painter(this._createPainterContainer(domElementHook));
        this._statusBar = new LTP.StatusBar(this._createStatusBarContainer(domElementHook));
        this._layerDialog = new LTP.LayerDialog();
        this._imageDisplay = new LTP.ImageDisplay(this._createImageDisplayContainer(domElementHook));

        this.keyboardCallbacks.scope = this;
        this._keyListener = new LTP.KeyListener(this.keyboardCallbacks);

        new LTP.CreateNewDialog().show(function(settings) {
            this._statusBar.setName(settings.name);
            this._statusBar.setSize(settings.size);
            this._layerManager = new LTP.LayerManager(settings.size);
            this._hookIntoLayerManager(this._layerManager);
            this._painter.activeCanvas = this._layerManager.activeLayer;
        });
    },

    _hookIntoLayerManager: function(layerManager) {
    },

    keyboardCallbacks : {
        g: function() {
            this._painter.toggleGrid();
        },
    
        z: function(shift) {
            var action = shift ? "zoomOut" : "zoomIn";
            this._painter[action].call(this._painter);
            this._imageDisplay[action].call(this._imageDisplay);
        },

        q: function(shift) {
            var tool = this._toolbar.leftToolChange(shift);
            this._painter.setLeftTool(tool);
        },

        w: function(shift) {
            var tool = this._toolbar.rightToolChange(shift);
            this._painter.setRightTool(tool);
        }
    }
}

tool = {
    brush: this._currentBrush,
    color: this._currentColor,
    paint: function(xy, canvas) {
    }
}

LTP.PaintTool = function(color, brush) {
};

LTP.PaintTool.prototype.perform = function(canvas, position) {
}

LTP.FillTool = function(color) {
};
LTP.FillTool.prototype.perform = function(canvas, position) {
}

LTP.EyeTool = function(callback) {
    this._callback = callback;
}

LTP.EyeTool.prototype.perform = function(canvas, position) {
    var color = this._getColor(canvas, position);
    this._callback(color);
};



$(function() {
    new(LTP.App).init($('body'));
});






wanted features
================
-- main paint window takes up entire window with the exception of the color strip at the top

-- color strip, shows the user's color palette. first ten colors are slightly separated and can be accessed by hitting the corresponding number.
		The currently selected color is highlighted with a white border

-- brush strip, like the color strip but brushes

-- status bar at bottom showing
	-- current brush
	-- current color
	-- file size
	-- pixel location
	-- save status
	-- file name
	-- zoom state
	-- layer state




key commands
	b -- show the brush strip
	b, while brush strip showing -- advance to next brush to the right
	shift-b, while brush strip showing -- advance to next brush to the left
	shift-b, while brush strip not showing -- show the brush strip
	<num> -- select the brush in the <num> spot when brush strip is showing
	b<num> -- select the brush in the <num> spot when brush strip not showing
	y -- favorite the current brush when brush strip is showing

    q = left
    w = right

	q/w -- show the color strip
	q/w, while color strip showing -- advance to the next color to the right
	shift-q/w, while color strip showing -- advance to the next color to the right
	shift-q/w, while color strip not showing -- show the color strip
	<num> -- select the color in the <num> spot when color strip is showing
	q/w<num> -- select the color in the <num> spot when the color strip is not showing
	y -- favorite the current color when color strip is showing

	? -- invoke help (also can click the help link, only link in entire app)

	mc -- bring up the color manager
	mb -- bring up the brush manager

    // is there any difference between saving and snapshotting?
	s -- save image
	shift-s -- save snapshot of image

	z -- zoom in
	shift-z -- zoom out

	g -- toggle grid on/off

	l -- invoke layer manager

	f -- toggle on/off fill bucket tool

	e -- toggle on/off eye dropper tool

    <space> -- while space is held down, zoom to 100%

